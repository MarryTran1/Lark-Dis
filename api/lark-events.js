// file: api/lark-events.js
const axios = require('axios');

// Bi·∫øn m√¥i tr∆∞·ªùng t·ª´ Vercel
const LARK_VERIFICATION_TOKEN = process.env.LARK_VERIFICATION_TOKEN;
const DISCORD_BOT_TOKEN = process.env.DISCORD_BOT_TOKEN;
const DISCORD_CHANNEL_ID = process.env.DISCORD_CHANNEL_ID;

module.exports = async (req, res) => {
    if (req.method !== 'POST') {
        return res.status(405).json({ error: 'Method not allowed' });
    }

    try {
        const data = req.body;

        // 1. X√°c minh webhook t·ª´ Lark
        if (data.type === "url_verification") {
            if (data.token !== LARK_VERIFICATION_TOKEN) {
                return res.status(403).json({ error: "Token x√°c th·ª±c kh√¥ng h·ª£p l·ªá." });
            }
            return res.status(200).json({ challenge: data.challenge });
        }

        // 2. Ki·ªÉm tra token t·ª´ s·ª± ki·ªán
        const tokenFromLark = data.token || data.header?.token;
        if (tokenFromLark !== LARK_VERIFICATION_TOKEN) {
            console.warn("‚ö†Ô∏è Token t·ª´ Lark sai ho·∫∑c thi·∫øu:", tokenFromLark);
            return res.status(403).json({ error: "Token s·ª± ki·ªán kh√¥ng h·ª£p l·ªá." });
        }

        // 3. X·ª≠ l√Ω tin nh·∫Øn g·ª≠i t·ª´ Lark
        if (data.header?.event_type === "im.message.receive_v1") {
            const { event } = data;
            const { sender, message } = event;

            // B·ªè qua tin t·ª´ bot ho·∫∑c kh√¥ng ph·∫£i text
            if (sender?.sender_type === "bot" || message?.message_type !== "text") {
                return res.status(200).json({ status: "ignored bot or non-text" });
            }

            const chatId = message.chat_id;
            let messageText = "";

            try {
                messageText = JSON.parse(message.content || "{}").text || "";
            } catch (err) {
                console.error("‚ùå Kh√¥ng ph√¢n t√≠ch ƒë∆∞·ª£c n·ªôi dung tin nh·∫Øn:", message.content);
                return res.status(400).json({ error: "Message content invalid" });
            }

            const senderId = sender.sender_id;
            const senderName = `User ${senderId?.user_id || senderId?.open_id}`;

            if (!messageText) {
                return res.status(200).json({ status: "empty message" });
            }

            // 4. G·ª≠i sang Discord ƒë·ªÉ bot x·ª≠ l√Ω ti·∫øp
            if (DISCORD_BOT_TOKEN && DISCORD_CHANNEL_ID) {
                try {
                    const content = `üü¶ Tin nh·∫Øn t·ª´ ${senderName} tr√™n Lark:\n${messageText}`;

                    await axios.post(
                        `https://discord.com/api/channels/${DISCORD_CHANNEL_ID}/messages`,
                        { content },
                        {
                            headers: {
                                Authorization: `Bot ${DISCORD_BOT_TOKEN}`,
                                'Content-Type': 'application/json'
                            }
                        }
                    );

                    console.log("‚úÖ Tin nh·∫Øn t·ª´ Lark ƒë√£ g·ª≠i l√™n Discord.");
                    return res.status(200).json({ status: "forwarded to Discord" });

                } catch (err) {
                    console.error("‚ùå G·ª≠i Discord th·∫•t b·∫°i:", err.message);
                    console.error(err.response?.data);
                    return res.status(500).json({ error: "G·ª≠i Discord l·ªói" });
                }
            } else {
                console.warn("‚ö†Ô∏è Ch∆∞a c·∫•u h√¨nh bot token ho·∫∑c channel ID");
                return res.status(500).json({ error: "Thi·∫øu c·∫•u h√¨nh Discord" });
            }
        }

        // 5. Kh√¥ng ph·∫£i s·ª± ki·ªán message
        return res.status(200).json({ status: "non-message event ignored" });

    } catch (err) {
        console.error("‚ùå L·ªói x·ª≠ l√Ω webhook:", err);
        if (!res.headersSent) {
            res.status(500).json({ error: "L·ªói m√°y ch·ªß n·ªôi b·ªô" });
        }
    }
};
