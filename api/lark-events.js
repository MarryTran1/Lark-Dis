// file: api/lark-events.js
const { sendMessageToLark } = require('./lark_handler');
const { getGeminiResponse } = require('./gemini_handler');
const axios = require('axios');

// L·∫•y bi·∫øn m√¥i tr∆∞·ªùng t·ª´ Vercel
const LARK_VERIFICATION_TOKEN = process.env.LARK_VERIFICATION_TOKEN;
const DISCORD_BOT_TOKEN = process.env.DISCORD_BOT_TOKEN;
const DISCORD_CHANNEL_ID = process.env.DISCORD_CHANNEL_ID;

module.exports = async (req, res) => {
    if (req.method !== 'POST') {
        return res.status(405).json({ error: 'Method not allowed' });
    }

    try {
        const data = req.body;

        // 1. X√°c minh webhook t·ª´ Lark
        if (data.type === "url_verification") {
            if (data.token !== LARK_VERIFICATION_TOKEN) {
                console.warn("‚ùå Token x√°c minh sai:", data.token);
                return res.status(403).json({ error: "Token x√°c th·ª±c kh√¥ng h·ª£p l·ªá." });
            }
            return res.status(200).json({ challenge: data.challenge });
        }

        // 2. Ki·ªÉm tra token trong header s·ª± ki·ªán
        console.log("üß™ D·ªØ li·ªáu webhook nh·∫≠n t·ª´ Lark:", JSON.stringify(data, null, 2));
        console.log("üîê Token h·ªá th·ªëng:", LARK_VERIFICATION_TOKEN);

        const tokenFromLark = data.token || data.header?.token;

        if (tokenFromLark !== LARK_VERIFICATION_TOKEN) {
        console.warn("‚ö†Ô∏è Token t·ª´ Lark sai ho·∫∑c thi·∫øu:", tokenFromLark);
        return res.status(403).json({ error: "Token s·ª± ki·ªán kh√¥ng h·ª£p l·ªá." });
        }

        // 3. Tr·∫£ l·ªùi ngay tr√°nh timeout
        res.status(200).json({ status: "ok" });

        // 4. X·ª≠ l√Ω message
        if (data.header?.event_type === "im.message.receive_v1") {
            const { event } = data;
            const { sender, message } = event;

            if (sender?.sender_type === "bot" || message?.message_type !== "text") return;

            const chatId = message.chat_id;
            let messageText = "";
            try {
                messageText = JSON.parse(message.content || "{}").text || "";
            } catch (err) {
                console.error("‚ùå L·ªói parse message content:", message.content);
                return;
            }

            const senderId = sender.sender_id;
            const senderName = `User ${senderId?.user_id || senderId?.open_id}`;
            if (!messageText) return;

            const aiResponse = await getGeminiResponse(chatId, messageText);
            await sendMessageToLark(chatId, aiResponse);

            // 5. G·ª≠i log t·ªõi Discord b·∫±ng bot
            if (DISCORD_BOT_TOKEN && DISCORD_CHANNEL_ID) {
                try {
                    const content = `üì• ${senderName} h·ªèi: ${messageText}\nüí¨ Tr·∫£ l·ªùi: ${aiResponse}`;
                    await axios.post(
                        `https://discord.com/api/channels/${DISCORD_CHANNEL_ID}/messages`,
                        { content },
                        {
                            headers: {
                                Authorization: `Bot ${DISCORD_BOT_TOKEN}`,
                                'Content-Type': 'application/json'
                            }
                        }
                    );
                    console.log("‚úÖ ƒê√£ g·ª≠i log ƒë·∫øn Discord.");
                } catch (err) {
                    console.error("‚ùå L·ªói khi g·ª≠i Discord:", err.message);
                    console.error(err.response?.data);
                }
            } else {
                console.warn("‚ö†Ô∏è Thi·∫øu DISCORD_BOT_TOKEN ho·∫∑c DISCORD_CHANNEL_ID");
            }
        }
    } catch (err) {
        console.error("‚ùå L·ªói x·ª≠ l√Ω webhook:", err);
        if (!res.headersSent) {
            res.status(500).json({ error: "L·ªói m√°y ch·ªß n·ªôi b·ªô" });
        }
    }
};
