// file: discord_listener.js
require('dotenv').config();
const { Client, GatewayIntentBits } = require('discord.js');
const axios = require('axios');
const { getGeminiResponse } = require('./gemini_handler'); // file b·∫°n ƒë√£ c√≥

// L·∫•y token v√† endpoint t·ª´ .env
const DISCORD_BOT_TOKEN = process.env.DISCORD_BOT_TOKEN;
const LARK_FORWARD_ENDPOINT = process.env.LARK_FORWARD_ENDPOINT; // V√≠ d·ª•: https://your-app.vercel.app/api/lark-send

// Kh·ªüi t·∫°o client Discord
const client = new Client({
    intents: [
        GatewayIntentBits.Guilds,
        GatewayIntentBits.GuildMessages,
        GatewayIntentBits.MessageContent
    ]
});

// Bot s·∫µn s√†ng
client.once('ready', () => {
    console.log(`‚úÖ Bot Discord ƒë√£ s·∫µn s√†ng v·ªõi t√™n: ${client.user.tag}`);
});

// X·ª≠ l√Ω tin nh·∫Øn m·ªõi
client.on('messageCreate', async (message) => {
    // B·ªè qua tin nh·∫Øn t·ª´ ch√≠nh bot
    if (message.author.bot) return;

    const userMessage = message.content.trim();
    const senderName = message.author.username;

    console.log(`üì® Nh·∫≠n tin t·ª´ ${senderName}: ${userMessage}`);

    try {
        // G·ª≠i prompt t·ªõi Gemini
        const aiResponse = await getGeminiResponse(message.id, userMessage);

        // G·ª≠i c√¢u tr·∫£ l·ªùi v√†o Discord
        await message.reply(`ü§ñ ${aiResponse}`);
        console.log("‚úÖ ƒê√£ g·ª≠i c√¢u tr·∫£ l·ªùi trong Discord");

        // G·ª≠i l·∫°i c√¢u tr·∫£ l·ªùi v·ªÅ bot Lark
        if (LARK_FORWARD_ENDPOINT) {
            await axios.post(LARK_FORWARD_ENDPOINT, {
                message: aiResponse,
                chat_id: "auto" // N·∫øu b·∫°n c√≥ mapping chat_id, s·ª≠a ch·ªó n√†y
            });
            console.log("üì§ ƒê√£ g·ª≠i l·∫°i tr·∫£ l·ªùi v·ªÅ bot Lark");
        } else {
            console.warn("‚ö†Ô∏è Thi·∫øu bi·∫øn m√¥i tr∆∞·ªùng LARK_FORWARD_ENDPOINT");
        }

    } catch (err) {
        console.error("‚ùå L·ªói x·ª≠ l√Ω message:", err.message);
        console.error(err.response?.data);
    }
});

// ƒêƒÉng nh·∫≠p bot
client.login(DISCORD_BOT_TOKEN);
